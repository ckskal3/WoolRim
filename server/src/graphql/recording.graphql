type Recording {
  id: ID!
  created: String!
  path: String!
  auth_flag: Status!
  duration: Float!
  user: User!
  poem: Poem!
}

input CreateRecordingInput {
  path: String!
  duration: Float!
  stu_id: Int!
  poem_name: String!
  poet_name: String!
}

input DeleteRecordingInput {
  stu_id: Int!
  poet_name: String!
  poem_name: String!
}

enum Status {
  REJECTED
  ACCEPTED
  WAITING
}

type RecordingResult {
  isSuccess: Boolean!
}

type getAllRecordingResult {
  isSuccess: Boolean!
  recording_list: [Recording!]!
}

type getRecordingForPlayResult {
  recording: Recording
  isBookmarked: Boolean!
}

type Query {
  getAllRecording(stu_id: Int): getAllRecordingResult
  getAllRecordingByLogin(stu_id: Int): [Recording!]!
  getRecordingForPlay(poem_id: ID!, user_id: ID, isMy: Boolean!): [getRecordingForPlayResult!]!
}

type Mutation {
  applyRecording(id_list: [ID!]!): Boolean!
  createRecording(input: CreateRecordingInput!): RecordingResult!
  deleteRecording(input: DeleteRecordingInput!): RecordingResult!
}