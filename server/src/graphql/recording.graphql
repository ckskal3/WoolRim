type Recording {
  id: ID!
  path: String!
  auth_flag: Status!
  duration: Float!
  user: User!
  poem: Poem!
}

input CreateRecordingInput {
  path: String!
  duration: Float!
  stu_id: Int!
  poem_name: String!
  poet_name: String!
}

input deleteRecordingInput {
  stu_id: Int!
  poet_name: String!
  poem_name: String!
}

enum Status {
  REJECTED
  ACCEPTED
  WAITING
}

type RecordingResult {
  isSuccess: Boolean!
}

type Query {
  getRecording(id: ID!): Recording
  getAllRecording(stu_id: Int): [Recording!]!
}

type Mutation {
  createRecording(input: CreateRecordingInput!): RecordingResult!
  deleteRecording(input: deleteRecordingInput!): RecordingResult!
}